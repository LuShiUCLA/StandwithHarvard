# 0. PACKAGE MANAGEMENT
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("reshape2", quietly = TRUE)) install.packages("reshape2")
library(dplyr)
library(ggplot2)
library(reshape2)

# 1. INPUT PARAMETERS
params <- list(
  cohort_n        = 500,
  prevalence      = 0.20,
  abi_cost        = 100,
  visit_cost      = 200,
  med_monthly     = 11.12 * 2,
  # Only used for illustration, not applied in this simplified model
  tx_cost = list(
    medicaid = c(asymptomatic=1200, symptomatic=1500, cli=15000, amputation=30000),
    societal = c(asymptomatic=1500, symptomatic=1800, cli=18000, amputation=45000)
  ),
  trans_probs = list(
    screen    = c(mace=0.02, esrd=0.005, death=0.01),
    no_screen = c(mace=0.03, esrd=0.007, death=0.01)
  ),
  mace_cost = 25000,
  esrd_cost = 90000,
  prod_loss_mace = 10000,
  prod_loss_esrd = 25000,
  welfare_cost_mace = 5000,
  welfare_cost_esrd = 10000,
  qaly_loss_mace = 0.2,
  qaly_loss_esrd = 0.4
)

# 2. ANALYSIS FUNCTION (PERSPECTIVE-SPECIFIC)
run_analysis <- function(strategy, perspective, horizon) {
  p <- params$trans_probs[[ifelse(strategy=="Screen", "screen", "no_screen")]]
  n <- params$cohort_n
  
  # Event counts
  mace_events <- n * p["mace"] * horizon
  esrd_events <- n * p["esrd"] * horizon
  deaths      <- n * p["death"] * horizon
  
  # Treatment cost: only for Screen
  treat_cost <- if(strategy == "Screen") {
    screening_cost <- n * (params$abi_cost + params$visit_cost)
    med_cost <- n * params$prevalence * horizon * 12 * params$med_monthly
    screening_cost + med_cost
  } else 0
  
  # Event costs (same for both perspectives)
  event_cost <- mace_events * params$mace_cost + esrd_events * params$esrd_cost
  
  # Societal costs (only for societal perspective)
  prod_loss <- if(perspective == "societal") {
    mace_events * params$prod_loss_mace + esrd_events * params$prod_loss_esrd
  } else 0
  welfare_cost <- if(perspective == "societal") {
    mace_events * params$welfare_cost_mace + esrd_events * params$welfare_cost_esrd
  } else 0
  
  # Total cost
  total_cost <- treat_cost + event_cost + prod_loss + welfare_cost
  
  # QALY calculation
  qaly_loss <- mace_events * params$qaly_loss_mace + esrd_events * params$qaly_loss_esrd
  qaly <- n * horizon - qaly_loss
  
  data.frame(
    Strategy = strategy,
    Perspective = perspective,
    Horizon = horizon,
    Total_Cost = total_cost,
    QALY = qaly,
    stringsAsFactors = FALSE
  )
}

# 3. RUN ALL SCENARIOS
scenarios <- expand.grid(
  Strategy    = c("Screen","No_Screen"),
  Perspective = c("medicaid","societal"),
  Horizon     = c(5,30),
  stringsAsFactors = FALSE
)
res <- do.call(rbind, lapply(seq_len(nrow(scenarios)), function(i) {
  run_analysis(scenarios$Strategy[i], scenarios$Perspective[i], scenarios$Horizon[i])
}))

# 4. CALCULATE PER CAPITA QALY GAINED AND COST-SAVING
res <- res %>%
  arrange(Perspective, Horizon, desc(Strategy)) %>%
  group_by(Perspective, Horizon) %>%
  mutate(
    QALY_gained_per_capita = (QALY - QALY[Strategy == "No_Screen"]) / params$cohort_n,
    Cost_saving_per_capita = (Total_Cost[Strategy == "No_Screen"] - Total_Cost) / params$cohort_n
  ) %>%
  ungroup()

# 5. OUTPUT TABLE
output_table <- res %>%
  select(Strategy, Perspective, Horizon, Total_Cost, QALY, QALY_gained_per_capita, Cost_saving_per_capita)

print(output_table, digits = 3)

cat("\nColumn notes:\n")
cat("- QALY_gained_per_capita: Per-person QALY gained by screening vs. no screening\n")
cat("- Cost_saving_per_capita: Per-person cost saving by screening vs. no screening\n")

# 6. HEATMAP PREP
heatmap_data <- res %>%
  mutate(
    Scenario = paste(Strategy, Perspective, Horizon, sep = "_")
  ) %>%
  select(Scenario, QALY_gained_per_capita, Cost_saving_per_capita) %>%
  reshape2::melt(id.vars = "Scenario", variable.name = "Metric", value.name = "Value")

# 7. HEATMAP
gg <- ggplot(heatmap_data, aes(x = Metric, y = Scenario, fill = Value)) +
  geom_tile(color = "white") +
  geom_text(aes(label = round(Value, 3)), size = 3) +
  scale_fill_gradient2(low = "red", mid = "white", high = "steelblue", midpoint = 0) +
  labs(
    title = "Per Capita QALY Gained and Cost Saving by Scenario",
    x = NULL, y = NULL, fill = "Per Capita Value"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.text.y = element_text(size = 10),
    panel.grid = element_blank()
  )
print(gg)

